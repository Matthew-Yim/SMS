package jpa.service;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.util.List;

public class StudentService implements StudentDAO {

    // This method reads the student table in your database and returns the data as a List<Student>
    @Override
    public List<Student> getAllStudents() {
        // Connection / Create Query as String / Load Query into "TypedQuery"[type] queue[name]
        try {
            EntityManager em = emFactoryObj.createEntityManager();
            String sql = "SELECT stud FROM Student stud";
            TypedQuery<Student> query = em.createQuery(sql, Student.class);

            // Error catching purposes
            return query.getResultList();
        } catch (Exception e) {
            System.out.println("Error occurred with getAllStudents, Most likely with Hibernate...");
            e.printStackTrace();
            return null;
        }
    }

    // This method takes a Student’s email as a String and parses the student list for a Student with that email and returns a Student Object.
    @Override
    public Student getStudentByEmail(String sEmail) {
        // Connection / Create Query as String / Load Query into "TypedQuery"[type] queue[name]
        try {
            EntityManager em = emFactoryObj.createEntityManager();
            String sql = "SELECT stud FROM Student stud WHERE stud.sEmail = :studentEmail";
            TypedQuery<Student> query = em.createQuery(sql, Student.class);
            query.setParameter("studentEmail", sEmail);

            // Error catching purposes
            return query.getSingleResult();
        } catch (Exception e) {
            System.out.println("Error occurred with getStudentByEmail, Most likely with Hibernate...");
            e.printStackTrace();
            return null;
        }
    }

    // This method takes two parameters: the first one is the user email and the second one is the password from the user input. Return whether or not a student was found.
    @Override
    public boolean validateStudent(String sEmail, String sPassword) {
        // Connection / Create Query as String / Load Query into "TypedQuery"[type] queue[name]
        try {
            EntityManager em = emFactoryObj.createEntityManager();
            String sql = "SELECT stud FROM Student stud WHERE stud.sEmail = :studentEmail";
            TypedQuery<Student> query = em.createQuery(sql, Student.class);
            query.setParameter("studentEmail", sEmail);

            // Error catching purposes
            Student studentObject = query.getSingleResult();
            if (studentObject.getSPass().equals(sPassword))
                return true;
            else
                return false;
        } catch (Exception e) {
            System.out.println("Error occurred with validateStudent, Most likely with Hibernate...");
            e.printStackTrace();
            return false;
        }
    }

    // After a successful student validation, this method takes a Student’s email and a Course ID. It checks in the join table (i.e. Student_Course) generated by JPA to find
    // if a Student with that Email is currently attending a Course with that ID. If the Student is not attending that Course, register the student for that course; otherwise not.
    @Override
    public void registerStudentToCourse(String sEmail, int cId) {
        // Connection / Create Query as String / Load Query into "TypedQuery"[type] queue[name]
        try{
            EntityManager em = emFactoryObj.createEntityManager();
            String sql = "SELECT stud FROM Student stud WHERE stud.sEmail = :studentEmail";
            TypedQuery<Student> query = em.createQuery(sql, Student.class);
            query.setParameter("studentEmail", sEmail);
            Student studentObject = query.getSingleResult();
            List<Course> courseList = studentObject.getSCourses();

            String sql2 = "SELECT c FROM Course c WHERE c.id = :courseId";
            TypedQuery<Course> query2 = em.createQuery(sql2, Course.class);
            query2.setParameter("courseId", cId);
            Course courseObject = query2.getSingleResult();

            if (!courseList.contains(courseObject)){
                System.out.println("Student is not currently enrolled\nInitiating enrollment process...");
                em.getTransaction().begin();
                studentObject.getSCourses().add(courseObject);
                // save the actor to the database
                em.persist(studentObject);

                // commit the transaction
                em.getTransaction().commit();
                em.clear();
            }
            else{
                System.out.println("You are already registered in that course!");
            }
        }
        catch(Exception e){
            System.out.println("Error occurred with registerStudentToCourse, Most likely with Hibernate...");
            e.printStackTrace();
        }
    }

    // This method takes a Student’s Email as a parameter and would find all the courses a student is registered for.
    @Override
    public List<Course> getStudentCourses(String sEmail) {
        // Connection / Create Query as String / Load Query into "TypedQuery"[type] queue[name]
        try{
            EntityManager em = emFactoryObj.createEntityManager();
            String sql = "SELECT stud FROM Student stud WHERE stud.sEmail = :studentEmail";
            TypedQuery<Student> query = em.createQuery(sql, Student.class);
            query.setParameter("studentEmail", sEmail);
            Student studentObject = query.getSingleResult();
            return studentObject.getSCourses();
        }
        catch(Exception e){
            System.out.println("Error occurred with getStudentCourses, Most likely with Hibernate...");
            e.printStackTrace();
            return null;
        }
    }
}
